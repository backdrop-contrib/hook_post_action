<?php
/**
 * @file
 * Provides additional hooks to perform actions after an entity is inserted,
 * updated, or deleted in the database.
 */

/**
 * Implements hook_entity_insert().
 */
function hook_post_action_entity_insert($entity, $type) {
  $entity_info = array(
    'entity' => $entity,
    'type' => $type,
    'operation' => 'insert',
  );
  backdrop_register_shutdown_function('_hook_post_action_post_save', $entity_info);
}

/**
 * Implements hook_entity_update().
 */
function hook_post_action_entity_update($entity, $type) {
  //hook_node_update unsets the original property after calling the hook functions.
  //To work around this we save a reference to the original object here,
  //and pass it in to _hook_post_action_post_save as an optional fourth argument.
  $original = isset($entity->original) ? $entity->original : NULL;
  $entity_info = array(
    'entity' => $entity,
    'type' => $type,
    'operation' => 'update',
    'original' => $original,
  );
  backdrop_register_shutdown_function('_hook_post_action_post_save', $entity_info);
}

/**
 * Implements hook_entity_delete().
 */
function hook_post_action_entity_delete($entity, $type) {
  $entity_info = array(
    'entity' => $entity,
    'type' => $type,
    'operation' => 'delete',
  );
  backdrop_register_shutdown_function('_hook_post_action_post_save', $entity_info);
}


/**
 * Helper function to call the new post-hooks.
 *
 * @param array $entity_info
 *  An array containing the fully-loaded entity object, the type of entity being
 *  saved (i.e. node, user, comment), and the operation that is taking place
 *  (insert/update/delete).
 */
function _hook_post_action_post_save($entity_info) {
  $entity = $entity_info['entity'];
  $type = $entity_info['type'];
  $op = $entity_info['operation'];
  $original = array_key_exists('original',$entity_info) ? $entity_info['original'] : NULL;
  $entity_is_saved = FALSE;
  $new_entity = NULL;

  //If $original is not null then restore it to the original property in the entity.
  if ($original != NULL) {
    $entity->original = $original;
  }

  if ($op == 'insert' || $op == 'update') {
    $entity_is_saved = TRUE;
  }
  if ($op == 'delete') {
    try {
      [$id] = entity_extract_ids($type, $entity);
      $new_entity = entity_load($type, array($id));
      if (!$new_entity) {
        $entity_is_saved = TRUE;
      }
    }
    catch (Exception  $e) {
      watchdog('hook_post_action_test', $e->getMessage());
    }
  }
  if ($entity_is_saved) {
    module_invoke_all('entity_post' . $op, $entity, $type);
    module_invoke_all('entity_postsave', $entity, $type, $op);

    if ($type == 'node') {
      module_invoke_all('node_post' . $op, $entity);
      module_invoke_all('node_postsave', $entity, $op);
    }
  }
}
